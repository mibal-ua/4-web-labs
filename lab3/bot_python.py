import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from revChatGPT.V1 import Chatbot

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ChatGPT
chatbot = None
token = os.getenv('CHATGPT_ACCESS_TOKEN')
if token:
    logger.info(f"Attempting to initialize ChatGPT with token starting with: {token[:10]}...")
    try:
        chatbot = Chatbot(config={"access_token": token})
        logger.info("ChatGPT initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize ChatGPT: {type(e).__name__}: {e}")
        chatbot = None
else:
    logger.warning("CHATGPT_ACCESS_TOKEN not found in environment variables")

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
main_menu_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"), KeyboardButton("üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó")],
    [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"), KeyboardButton("ü§ñ Prompt ChatGPT")]
], resize_keyboard=True, one_time_keyboard=False)

back_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
], resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    await update.message.reply_html(
        f"–í–∞—Å –≤—ñ—Ç–∞—î —á–∞—Ç-–±–æ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É",
        reply_markup=main_menu_keyboard
    )

async def handle_student_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_info = """
üë®‚Äçüéì *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞*

üìù **–ü—Ä—ñ–∑–≤–∏—â–µ:** –ë–∞–ª–∞—Ö–æ–Ω –ú.–û.
üéì **–ì—Ä—É–ø–∞:** –Ü–ú-22
üè´ **–§–∞–∫—É–ª—å—Ç–µ—Ç:** –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ —Ç–∞ –æ–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏
üìö **–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:** –Ü–Ω–∂–µ–Ω–µ—Ä—ñ—è –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è
üìÖ **–ö—É—Ä—Å:** 4
    """
    
    await update.message.reply_markdown(student_info, reply_markup=back_keyboard)

async def handle_it_technologies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π"""
    tech_info = """
üíª *IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó*

üöÄ **Front-end:**
‚Ä¢ HTML5, CSS3, JavaScript
‚Ä¢ React.js, Vue.js
‚Ä¢ Bootstrap, Tailwind CSS

‚öôÔ∏è **Back-end:**
‚Ä¢ Node.js, Express.js
‚Ä¢ Python, FastAPI
‚Ä¢ MongoDB, PostgreSQL

üîß **–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:**
‚Ä¢ Git, GitHub
‚Ä¢ Docker, AWS
‚Ä¢ VS Code, WebStorm
    """
    
    await update.message.reply_markdown(tech_info, reply_markup=back_keyboard)

async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤"""
    contact_info = """
üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è*

üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** +380 50-555-55-55
üìß **Email:** student@example.com
üí¨ **Telegram:** @mibal_ua
üîó **LinkedIn:** linkedin.com/in/mibal-ua
üåê **GitHub:** github.com/mibal-ua
    """
    
    await update.message.reply_markdown(contact_info, reply_markup=back_keyboard)

async def handle_chatgpt_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É ChatGPT"""
    user_id = update.effective_user.id
    user_states[user_id] = 'chatgpt'
    
    if chatbot:
        message = """
ü§ñ *–†–µ–∂–∏–º ChatGPT –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ*

–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –æ—Ç—Ä–∏–º–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT!

–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:
‚Ä¢ "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"
‚Ä¢ "–©–æ —Ç–∞–∫–µ React?"
‚Ä¢ "–Ø–∫ –ø—Ä–∞—Ü—é—î Node.js?"
        """
    else:
        message = """
‚ö†Ô∏è *ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π*

–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ ChatGPT.
–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ACCESS_TOKEN.

–ü–æ–∫–∏ —â–æ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –±–∞–∑–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
        """
    
    await update.message.reply_markdown(message, reply_markup=back_keyboard)

async def handle_chatgpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è ChatGPT"""
    user_message = update.message.text
    logger.info(f"Processing ChatGPT request: {user_message[:50]}...")
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä—É
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    try:
        if chatbot:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è revChatGPT
            logger.info("Sending request to ChatGPT...")
            response = ""
            for data in chatbot.ask(user_message):
                response = data.get("message", "")
                logger.debug(f"Received data from ChatGPT: {data}")
            
            if not response:
                raise Exception("Empty response from ChatGPT")
            
            logger.info(f"ChatGPT response received: {response[:100]}...")
            await update.message.reply_markdown(
                f"ü§ñ *ChatGPT –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:*\n\n{response}",
                reply_markup=back_keyboard
            )
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —è–∫—â–æ ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
            logger.warning("ChatGPT not available, using local responses")
            response = generate_local_response(user_message.lower())
            await update.message.reply_markdown(
                f"ü§ñ *AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:*\n\n{response}",
                reply_markup=back_keyboard
            )
            
    except Exception as e:
        logger.error(f"ChatGPT Error: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ ChatGPT.",
            reply_markup=back_keyboard
        )

def generate_local_response(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
    responses = {
        '–≤–µ–±': '–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤–∫–ª—é—á–∞—é—Ç—å HTML, CSS, JavaScript –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —Ç–∞ Node.js, Python –¥–ª—è –±–µ–∫–µ–Ω–¥—É.',
        'html': 'HTML - —Ü–µ –º–æ–≤–∞ —Ä–æ–∑–º—ñ—Ç–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫.',
        'css': 'CSS –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—é —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–æ–∫.',
        'javascript': 'JavaScript - –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤.',
        'react': 'React - JavaScript –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤.',
        'node': 'Node.js –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ JavaScript –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.',
        'python': 'Python - —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –ø–æ–ø—É–ª—è—Ä–Ω–∞ –¥–ª—è –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∏ —Ç–∞ AI.',
    }
    
    for keyword, response in responses.items():
        if keyword in message:
            return response
    
    return "–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –Ø –º–æ–∂—É —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, HTML, CSS, JavaScript, React, Node.js —Ç–∞ Python."

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    user_states[user_id] = None
    
    await update.message.reply_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É",
        reply_markup=main_menu_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç":
        await handle_student_info(update, context)
    elif text == "üíª IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó":
        await handle_it_technologies(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏":
        await handle_contacts(update, context)
    elif text == "ü§ñ Prompt ChatGPT":
        await handle_chatgpt_prompt(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await handle_back(update, context)
    elif user_states.get(user_id) == 'chatgpt':
        await handle_chatgpt_message(update, context)
    else:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Health check —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    if os.getenv('NODE_ENV') == 'production' or os.getenv('RENDER'):
        import threading
        from http.server import HTTPServer, BaseHTTPRequestHandler
        import json
        
        class HealthHandler(BaseHTTPRequestHandler):
            def do_GET(self):
                if self.path == '/' or self.path == '/health':
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.end_headers()
                    response = {
                        'status': 'Bot is running!',
                        'timestamp': str(os.times()),
                        'chatgpt_available': chatbot is not None,
                        'chatgpt_token_set': bool(os.getenv('CHATGPT_ACCESS_TOKEN')),
                        'telegram_token_set': bool(os.getenv('TELEGRAM_TOKEN'))
                    }
                    self.wfile.write(json.dumps(response).encode())
                else:
                    self.send_response(404)
                    self.end_headers()
                    
            def log_message(self, format, *args):
                pass  # Suppress HTTP logs
        
        def run_health_server():
            port = int(os.getenv('PORT', 8000))
            server = HTTPServer(('0.0.0.0', port), HealthHandler)
            print(f"üåê Health check server running on port {port}")
            server.serve_forever()
        
        health_thread = threading.Thread(target=run_health_server, daemon=True)
        health_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ Telegram bot started successfully!")
    if chatbot:
        print("‚úÖ ChatGPT connection established")
    else:
        print("‚ö†Ô∏è ChatGPT not available, using local responses")
    
    application.run_polling()

if __name__ == '__main__':
    main()